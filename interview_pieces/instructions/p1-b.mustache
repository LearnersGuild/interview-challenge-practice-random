Create a function in the file `db.js` called `{{ p1.dbFuncName }}`.

The function should accept one string parameter named `{{ p1.parameter1Name }}` and one number parameter named `{{ p1.parameter2Name }}`. The function should add a row to the `{{ mainTableRootName }}s` table in the databse. It should use the `pg-promise` database client (already instantiated) and return a promise that resolves to the result of the query (an object containing the `id` of the added {{ p1.mainTableRootName }}). 

Sample result:

```
{{{ p1.sampleDbResult }}}
```

- [ ] __5:__ The function takes parameters called `{{ p1.parameter1Name }}` and `{{ p1.parameter2Name }}`.
- [ ] __5:__ The query uses indexed parameters (e.g. `$1`)
- [ ] __10:__ The result set of the SQL query is an object with the key `id`.
- [ ] __10:__ After the function runs, there is a new row in the `{{ p1.mainTableRootName }}s` table with the {{ p1.parameter1Description }} `{{ p1.parameter1Name }}`.
- [ ] __5:__ The new row in the `{{ p1.mainTableRootName }}s` table is associated with the {{ p2.parameter2Description }} `{{ p1.parameter2Name }}`
- [ ] __5:__ The function returns a promise that resolves to the results of the query.
