##### DOM Manipulation

In this section, the scaffolding has been created for a `/{{ p3.endpoint }}` route that returns the {{ p3.mainTableMainColumnName }} and {{ p3.secondaryFieldDescription }} for every {{ p3.mainTableRootName }} in the database. Choose a template engine (EJS or Pug) in `app.js`, then make a `GET` request for the `/{{ p3.endpoint }}` resource. 

The challenge for this section: I'm afraid that the time has come when one monster {{ p3.secondaryTableRootName }} has obliterated all the others and claimed all the {{ p3.mainTableRootName }}s. The user will enter the {{ p3.secondaryTableMainColumnName }} of this monster {{ p3.secondaryTableRootName }} in the text input box, and when they click the button labeled `{{ p3.buttonText }}`, all {{ p3.secondaryTableRootName }}s in the table will be updated with this new {{ p3.secondaryTableMainColumnName }}. __Note__: __There is no need to update the database or communicate with the server in any way.__

You may use vanilla JS or jQuery.

- [ ] __10:__ The `{{ p3.buttonText }}` button has an on click event listener.
- [ ] __10:__ The event listener callback uses JavaScript or jQuery to access the text in the input field.
- [ ] __10:__ The event listener callback clears the text entered in the input box, so that it returns to being blank.
- [ ] __15:__ The event listener callback updates every {{ p3.secondaryFieldDescription }} with the text from the input box.